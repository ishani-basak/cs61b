1a. Results for InsertRandomSpeedTest for N = 1000000:
    1.89 sec for BSTStringSet
    0.87 sec for ECHashStringSet
    1.40 sec for TreeSet
    0.63 sec for HashSet

1b. Results for InsertRandomSpeedTest for N = 2000000:
    4.01 sec for BSTStringSet
    1.80 sec for ECHashStringSet
    3.35 sec for TreeSet
    1.17 sec for HashSet

1c. Does your ECHashStringSet look roughly linear or roughly quadratic
in its scaling behavior for random strings?
    The ECHashStringSet looks roughly linear in its scaling behavior for random strings.

2a. Results for InsertInOrderSpeedTest for N = 10000:
    1.56 sec for BSTStringSet
    0.02 sec for ECHashStringSet
    0.01 sec for TreeSet
    0.01 sec for HashSet

2b. Results for InsertInOrderSpeedTest for N = 20000:
    6.10 sec for BSTStringSet
    0.03 sec for ECHashStringSet
    0.03 sec for TreeSet
    0.01 sec for HashSet

2c. Does your **BST**StringSet look roughly linear or roughly
quadratic in its scaling behavior for in order strings?
    The BSTStringSet is roughly linear in its scaling behavior for in order strings.

Before submitting, make sure that your ECHashStringSet is capable of
handling inputs of size 1000000 in a reasonable amount of time (a few
seconds).

