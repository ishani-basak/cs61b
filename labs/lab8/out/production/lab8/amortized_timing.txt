Q: Is one GrowList implementation always better than the others?
A: The GeomGrowList implementation is always better than the other two, as shown on the graph

Q: Why is the runtime for N insertions into a geometrically resizing list a Theta(N) operation?
A: In a geometrically resizing list, the size increases as 1+2+4+8+...+N, which evaluates to Theta(N).

Q: Why is the runtime for N insertions into a arithmetically resizing list a Theta(N^2) operation?
A: In an arithmetically resizing list, the size increases as 1+2+3+4+...+N, which evaluates to Theta(N^2).

Q: How does the runtime per operation for the ArithGrowList compare to that of GeomGrowList and JavaGrowList? Specifically look at the non-accumulated plots and describe the trends for how long each operation takes as a function of how many elements have already been inserted in the list.
A: The runtime per operation for ArithGrowList is much higher than the other two lists.

Q: When are there spikes in the per operation runtime graphs for each of the implementations? Do these make sense to you? Hint: some of these should and others might not. Empirical runtime can be quite messy and depends on machine specifics which will be revealed in other subsequent classes like CS61C.
A: In general the GrowLists' spikes occur as the size of the array exponentially increases, but the rates are different for each.

Q: Optional: Try changing the code for GeomGrowList to resize by a different factor. How does this effect the theoretical asymptotic runtime? How does this effect the plotted runtime?
A:

Q: Optional: Try changing the code for ArithGrowList to resize by adding a different fixed number of spots in the array. How does this effect the theoretical asymptotic runtime? How does this effect the plotted runtime?
A: