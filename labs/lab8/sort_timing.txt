Q: Is one sorting algorithm always faster than another?
A: Yes, the CountingSorter algorithm is always faster than the other sorting algorithms

Q: Above we said that BubbleSort, WipingBubbleSort, and InsertionSort each had the same Theta(N^2) asymptotic time complexity. How can you explain the differences in the plots for these three algorithms?
A: The plots in the graph are not accounting for the worst case situation, so the Theta(N^2) asymptotic time complexity would be the same but O(N^2) asymptotic time complexity would all be different. In this scenario, BubbleSort had worse case than the other sorting algorithms.

Q: What information can we gain from empirical analysis of algorithms which might not be as noticeable in asymptotical bounds?
A: We can gain more information about coefficients and less significant terms from empirical analysis of algorithms.

Q: For any given sorting algorithm, does increasing the array size always mean the sorting takes longer?
A: Not necessarily. The bottom two graphs, plotting CountingSorter and JavaSorter, have almost the same runtime no matter how large the array size is.

Q: How does changing nrepeats change the plot?
A: Increasing nrepeats creates less deviations in the curves of each of the sorting algorithms.

Q: Is your plot the exact same as your partner's plot, even with the same values of ntrials, by, and nrepeats?
A: No, because all the arrays are randomly created, and trials can never be identically reproduced.

Q: Optional: Look at the source code for BubbleSorter to WipingBubbleSorter. After looking at the plots, can you intuitively explain why WipingBubbleSorter is usually 2x as fast as BubbleSorter? (Hint: Consider the immobility of some elements when the swapping passes are single directional (i.e. only going forward), and how this "Wiping" strategy helps deal with that issue.) Can you come up with an example that shows the difference in runtime?
A: